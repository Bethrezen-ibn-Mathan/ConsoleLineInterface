
Формат команд:
    - Команда может включать любое число аргументов
    - Аргументы разделяются пробелом (1 или несколькими)
    - Аргументом програмы может быть ключ
    - Ключи, зачастую, начинаются со специальных символов: -, --, /, + и т.п.
    - Ключи могут иметь аргументы. Эти аргументы или следуют за ключём через разделитель или
    следуют через символ "=" и перечисляются через запятую без пробелов.
    - То, как обрабатываются аргументы ключа, определяется самим ключём
    - Если аргументы ключа следуют через пробел, то должно быть заранее известно их число
    (т.е. ключ должен сам определить, что является его аргументом а что - не является)
    - Зачастую, у всех команд есть мануал, вызываемый по ключу -h (--help)
    - Если ключи повторяются то используется только первый или последний в зависимости от реализации.
    Пользователю выводится предупреждение про повтор ключей.
    - Один и тот же ключ может иметь несколько форм (к примеру -h и --help)
    - Аргументом команды может (но не обязана быть) другая команда (подкоманда). Список подкоманд
    и их допустимость определяется в спецификации каждой конкретной команды отдельно.
    - Поведение подкоманды, её момент вызова и влияние на результат вызывающей команды целиком
    и полностью определяется логикой вызывающей команды
    - Ключи для подкоманды следуют после неё. Подкоманда и её аргументы должны стоять
    ПОСЛЕ всех аргументов вызывающей команды.
    - В реализации для изменения логики вызывающей команды желательно вместо подкоманд
    использовать ключи
    - В реализациях для аргументов ключей желательно использовать форму со знаком "=" и перечислением
    через запятую (пример неоднозначности: примеры №4 и №13 ниже).
    - Смешение форм не допускается: или так или так.
    - Сам запуск очередного запроса к интерфейсу тоже является командой 0го уровня,
    аргументами которой являются другие команды.


    Примеры
        cmd                 : команда без аргументов
        cmd -p              : команда с ключём без аргументов
        cmd --properties    : команда с длинным ключём без аргументов
        cmd -p 2            : команда с ключём, который принимает 1 аргумент
        cmd -p 2 4          : команда с ключём, у которого 2 аргумента
        cmd -p=2            : команда с ключём, который принимает 1 аргумент
        cmd -p=2,4          : команда с ключём, у которого 2 аргумента
        cmd -p=2.0,4.0      : команда с ключём, у которого 2 аргумента типа float
        cmd save            : команда, вызывающая подкоманду save
        cmd -p save         : команда с ключём -p, вызывающая подкоманду save
        cmd -p save -a -b   : команда с ключём -p, вызывающая подкоманду save с ключами -a -b
        cmd 2               : команда с аргументом 2 без ключей
        cmd -h 2            : команда с ключём -h (без аргументов) и с аргументом 2 (сравнить с №4)


О структуре программы
    Программа состоит из таких частей:

    1. Интерфейс.
    Описывает работу некоторого консольного интерфейса, который работает в цикле.
    На очередной итерации взаимодействия интерфейс принимает от сканнера строку с командой,
    разбивает её на части и передаёт обработчику. Как работает обработчик интерфейс не знает.
    Результатом работы обработчика является некий ответ, из которого интерфейсу,
    в первую очередь, интересен флаг завершения взаимодействия (по умолчанию, бит 0x1). Получив
    этот флаг, интерфейс завершает взаимодействие.

    2. Команда.
    Имеет метод main, включающий в себя входную разбитую строку и смещение.
    Команда анализирует строку, парсит опции и подкоманды (если они есть и допускаются) и
    выполняет трансляцию результата анализа в запрос к API. Сама команда ничего не делает и доступа
    к "начинке" не имеет.
    Парсинг опций производится независимо от команды.

    3. Опции
    Каждая команда имеет формирователь опций. В формирователе устанавливаются такие соответствия:
        * имя (ключ) - идентификатор
        * идентификатор - парсер, [обработчик]

    Обработчик не является обязательным. Более того, сама команда решает, передавать управление
    обработчику или нет. Если его нет то команда сама обрабатывает ключ.

